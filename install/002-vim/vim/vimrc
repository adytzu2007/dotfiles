"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vi Improved configuration
" @author Adrian Bacircea
"
" Inspired from
" - ddvlad
" - Alexandru Mosoi
" - Cosmin Ratiu
" - alexj
" - Bee
" - amix@amix.dk (amix the lucky stiff)
"   amix.dk/vim/vimrc.html
" - michaeljsmalley - https://github.com/michaeljsmalley
" - Jose Elena Campana - https://github/jelera
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
if &compatible
    set nocompatible               " Be iMproved
endif

let g:python3_host_prog = '/usr/bin/python3'

" Required:
set runtimepath+=~/.cache/dein/repos/github.com/Shougo/dein.vim

" Required:
if dein#load_state('~/.cache/dein')
    call dein#begin('~/.cache/dein')

    " Let dein manage dein
    " Required:
    call dein#add('~/.cache/dein/repos/github.com/Shougo/dein.vim')

    call dein#add('ap/vim-buftabline')

    " Theme
    call dein#add('morhetz/gruvbox')

    call dein#add('itchyny/lightline.vim')

    " Syntax highlighting
    call dein#add('zah/nim.vim')

    " Code formatting
    call dein#add('google/vim-maktaba', {'merged': 0})
    call dein#add('google/vim-codefmt', {'merged': 0})
    call dein#add('google/vim-glaive')
    "call dein#add('syml/rust-codefmt')

    " Code cross-referencing
    "call dein#add('autozimu/LanguageClient-neovim', {
    "      \ 'rev': 'next',
    "      \ 'build': 'bash install.sh'})
    call dein#add('neoclide/coc.nvim', { 'merged': 0, 'rev': 'release' })

    " Code completion
    "call dein#add('roxma/nvim-yarp')
    "call dein#add('ncm2/ncm2')
    "call dein#add('Shougo/echodoc.vim')

    " Ultisnips
    call dein#add('SirVer/ultisnips')
    call dein#add('honza/vim-snippets')

    call dein#add('matze/vim-meson')

    " Required:
    call dein#end()
    call dein#save_state()
endif

if dein#check_install()
    finish "plugins are not installed yet
endif

"let g:LanguageClient_serverCommands = {
"  \ 'rust': ['rustup', 'run', 'stable', 'rls'],
"  \ 'cpp': ['clangd'],
"  \ 'python': ['pylsp'],
"  \ }
"let g:LanguageClient_autoStart = 1
"let g:echodoc#enable_at_startup = 1
"let g:echodoc#type = 'signature'

set completeopt=noinsert,menuone,noselect

call glaive#Install()
Glaive codefmt plugin[mappings]


" Required:
filetype plugin indent on
syntax enable


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Automatically use the current file's directory as the working directory
set autochdir

" Prevent 'Hit ENTER to continue message'
set cmdheight=2
set shortmess=atToOIc

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

" Always draw sign column
set signcolumn=yes

" Directories for backup and swap
set backupdir=/tmp
set directory=/tmp
set nobackup
set nowritebackup

" More tabs
set tabpagemax=20

set undofile " Enable persistent undo
set undodir=. " Store undo buffer with edited files
set undolevels=1000  " Maximum number of changes that can be undoed
set undoreload=100000 " Maximum number of lines to store to undo a file reload

" Disable sounds
set noerrorbells
set novisualbell
set t_vb=
set tm=500

" Disable mouse support
set mouse=""

" Hide buffer instead of closing it when another file is opened
set hidden

" Activate enhanced command completion
set wildmenu
set wildmode=full

" Set command line history
set history=50
set showcmd

" Encoding
set encoding=utf-8
set termencoding=utf-8

" Enable local vim configuration files
set exrc
set secure


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Events
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn file type detection on
filetype plugin on
filetype plugin indent on

autocmd BufRead,BufNewFile *.g set filetype=antlr3
autocmd BufRead,BufNewFile *.sc set filetype=python
autocmd BufRead,BufNewFile *
  \ if getline(1) =~ '^# A Perforce \(.*\) Specification.$' |
  \   :set filetype=perforce |
  \ endif
autocmd BufRead,BufNewFile *
  \ if getline(2) =~ '^Change:\t' |
  \   :set filetype=perforce |
  \ endif

autocmd FileType text setlocal textwidth=78
autocmd FileType perforce setlocal textwidth=78

" we don't want tabs to expand to spaces for certain files
autocmd FileType make setlocal noexpandtab
autocmd FileType haskell setlocal noexpandtab
autocmd FileType perforce setlocal noexpandtab
autocmd FileType snippets setlocal expandtab
autocmd FileType typescript,typescriptreact let b:codefmt_formatter="prettier"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Theme/Colors/UI
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Turn syntax highlighting on

if has('termguicolors')
    set termguicolors
endif

colorscheme gruvbox
set background=dark
let g:lightline = {
    \ 'colorscheme': 'gruvbox',
    \ 'separator': {
        \ 'left': '', 
        \ 'right': '',
        \ },
    \ 'subseparator': {
        \ 'left': '', 
        \ 'right': '',
        \ },
    \ 'component_function': {
        \ 'cocstatus': 'coc#status'
        \ },
    \ }

" Highlight characters that go over 100 columns
highlight OverLength ctermbg=red ctermfg=white guibg=#592929
match OverLength /\%101v.\+/

" Highlight trailing shitespace
highlight ExtraWhitespace ctermbg=red ctermfg=white guibg=#592929
call matchadd('ExtraWhitespace', '\s\+$')
call matchadd('ExtraWhitespace', '\s\+$\| \+\ze\t')
call matchadd('ExtraWhitespace', '[^\t]\zs\t\+')

" Ignore case when searching
set ignorecase
" except for searches that contain upper case characters
set smartcase

" Highlight while typing
set incsearch
" don't continue to highlight searched phrases after
set nohlsearch

set showmatch
set mat=2

" Highlight current line
set cursorline

" Show line numbers
set number

" Open new vertical splits to the right of current one.
set splitright

set ttyfast
set lazyredraw

set diffopt+=iwhite
set diffexpr=""

" Activate auto-indent
set autoindent
set smartindent
set cindent
set cinoptions=g-1

" Expand tabs to spaces
set expandtab

" Don't wrap
set nowrap
set textwidth=0
set wrapmargin=0

" Mark tabs and spaces
set list listchars=tab:»\ ,trail:·,extends:»,precedes:«


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Function definitions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! VarExists(var, val)
  if exists(a:var) | return a:val | else | return '' | endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ViM Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" set map leader
let mapleader = ","
let g:mapleader = ','

" Buffers
nmap        <Leader>1   :enew<CR>
nmap        <Leader>2   :e 
" Split windows
nmap        <Leader>3   :vnew<CR>
nmap        <Leader>4   :vnew 

" Move through tabs
nnoremap    <Tab>       <C-w>w
" Move through buffers
map         <C-Left>    <ESC>:bp<CR>
map         <C-Right>   <ESC>:bn<CR>
imap        <C-Left>    <ESC><C-Left>
imap        <C-Right>   <ESC><C-Right>

" Forced save/quit
nmap        <Leader>w   :w!<CR>
nmap        <Leader>q   :q!<CR>

" Indent file
map         <Leader>i   <ESC>gg=G

" Change system includes to local includes (C/C++)
nnoremap <leader>cli :.s/#include [<"]\([^">]\+\)[">]/#include "\1"/<cr>
vnoremap cli :s/\%V#include [<"]\([^">]\+\)[">]/#include "\1"/\|'<,'>sort u<cr>

" Change local includes to a system includes (C/C++)
nnoremap <leader>csi :.s/#include [<"]\([^">]\+\)[">]/#include <\1>/<cr>
vnoremap csi :s/\%V#include [<"]\([^">]\+\)[">]/#include <\1>/\|'<,'>sort u<cr>

" Strip comments from selected lines
vnoremap sc :s/\%V\s*\/\/.*$//<cr>

" Always show the signcolumn, otherwise it would shift the text each time
" diagnostics appear/become resolved.
if has("nvim-0.5.0") || has("patch-8.1.1564")
  " Recently vim can merge signcolumn and number column into one
  set signcolumn=number
else
  set signcolumn=yes
endif

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" Use `[g` and `]g` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,typescriptreact,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
" Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Map function and class text objects
" NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

" Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

" Use CTRL-S for selections ranges.
" Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

" Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

" Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

" Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

" Add (Neo)Vim's native statusline support.
" NOTE: Please see `:h coc-status` for integrations with external plugins that
" provide custom statusline: lightline.vim, vim-airline.
"set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

" Mappings for CoCList
" Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
" Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
" Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
" Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
" Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
" Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
" Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
" Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>


" Git specific configuration
let git_path = system("git rev-parse --show-toplevel 2>/dev/null")
let git_vimrc = substitute(git_path, '\n', '', '') . "/.vimrc"
if !empty(glob(git_vimrc))
    sandbox exec ":source " . git_vimrc
endif

let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-l>"
let g:UltiSnipsJumpBackwardTrigger="<c-h>"

set ts=2 sts=2 sw=2
